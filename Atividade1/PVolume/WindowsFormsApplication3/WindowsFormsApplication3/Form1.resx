<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>